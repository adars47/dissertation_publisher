{"version":3,"sources":["Pages/Login.js","Component/Header.js","Component/PatientInfo.js","Component/UploadComponent.js","Pages/Homepage.js","App.js","reportWebVitals.js","index.js"],"names":["defaultTheme","createTheme","SignIn","props","alert","setAlert","useState","credentials","setCredentials","_jsxs","ThemeProvider","theme","children","Container","component","maxWidth","_jsx","CssBaseline","Box","sx","marginTop","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlinedIcon","Typography","variant","onSubmit","event","preventDefault","data","FormData","currentTarget","credential","publicKey","get","trim","privateKey","accountNumber","Alert","severity","setTimeout","localStorage","setItem","JSON","stringify","noValidate","mt","TextField","margin","required","fullWidth","id","label","name","autoFocus","type","Button","mb","Header","flexGrow","AppBar","position","Toolbar","color","marginLeft","onClick","clear","PatientInfo","patient","console","log","setPatient","padding","EthCrypto","require","CryptoJS","registerPlugin","FilePondPluginFileEncode","UploadComponent","personalFiles","setPersonalFiles","medicalFiles","setMedicalFiles","restartProcess","undefined","Grid","container","xs","item","style","FilePond","allowMultiple","onupdatefiles","fileItems","files","map","fileItem","allowFileEncode","async","formData","count","random_password","length","charset","retVal","i","n","charAt","Math","floor","random","generatePassword","medicalFile","val","append","file","personalFile","encrypted","AES","encrypt","getFileEncodeBase64String","toString","enc_blob","Blob","parse","getItem","signed_encryption_key","encryptWithPublicKey","encryptedString","cipher","axios","post","then","response","status","Homepage","App","className","reportWebVitals","onPerfEntry","Function","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","React","StrictMode"],"mappings":"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","file":"static/js/main.e8a9e4e5.chunk.js","sourcesContent":["import { useState } from 'react';\nimport Avatar from '@mui/material/Avatar';\nimport Button from '@mui/material/Button';\nimport CssBaseline from '@mui/material/CssBaseline';\nimport TextField from '@mui/material/TextField';\nimport Box from '@mui/material/Box';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\nimport Typography from '@mui/material/Typography';\nimport Container from '@mui/material/Container';\nimport { createTheme, ThemeProvider } from '@mui/material/styles';\nimport Alert from '@mui/material/Alert';\n\nconst defaultTheme = createTheme();\n\n\nexport default function SignIn(props) {\n\n  const [alert, setAlert] = useState(null);\n  const credentials= props.credentials;\n  const setCredentials =  props.setCredentials;\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    const data = new FormData(event.currentTarget);\n    let credential = {\n        publicKey: data.get('publicKey').trim(),\n        privateKey: data.get('privateKey').trim(),\n        accountNumber: data.get('accountNumber').trim()\n      };\n\n    if(credentials === false || credential.privateKey==\"\" || credential.publicKey==\"\"){\n        setAlert(<Alert severity=\"error\">You must insert a valid private and public key!</Alert>);\n        setTimeout(function(){\n            setAlert(null);\n        },10000);\n    }else\n    {\n      localStorage.setItem(\"credentials\",JSON.stringify(credential));\n      setCredentials(credential);\n    }\n  };\n\n  return (\n    <ThemeProvider theme={defaultTheme}>\n      {alert}\n      <Container component=\"main\" maxWidth=\"xs\">\n        <CssBaseline />\n        <Box\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n          <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n            <LockOutlinedIcon />\n          </Avatar>\n          <Typography component=\"h1\" variant=\"h5\">\n            Decentralized Health Vault\n          </Typography>\n          <Typography component=\"h1\" variant=\"h5\">\n            Publisher's portal\n          </Typography>\n          <Box component=\"form\" onSubmit={handleSubmit} noValidate sx={{ mt: 1 }}>\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              id=\"publicKey\"\n              label=\"Public Key\"\n              name=\"publicKey\"\n              autoFocus\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"privateKey\"\n              label=\"Private Key\"\n              type=\"password\"\n              id=\"privateKey\"\n            />\n            <TextField\n              margin=\"normal\"\n              required\n              fullWidth\n              name=\"accountNumber\"\n              label=\"Account Number\"\n              id=\"accountNumber\"\n            />\n            <Button\n              type=\"submit\"\n              fullWidth\n              variant=\"contained\"\n              sx={{ mt: 3, mb: 2 }}\n            >\n              Sign In\n            </Button>\n          </Box>\n        </Box>\n      </Container>\n    </ThemeProvider>\n  );\n}","import { Button } from \"@mui/material\";\nimport AppBar from '@mui/material/AppBar';\nimport Box from '@mui/material/Box';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\n\nfunction Header(props){\n    function logout(){\n        localStorage.clear();\n        props.setCredentials(null);\n       }\n   \n    return (    \n    <Box sx={{ flexGrow: 1 }}>\n        <AppBar position=\"static\">\n          <Toolbar variant=\"dense\">\n            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n              Health Vault Publishers Portal\n            </Typography>\n            <Button variant=\"contained\" sx={{ marginLeft: \"auto\" }} onClick={logout}>Logout</Button>\n          </Toolbar>\n        </AppBar>\n      </Box>\n    );\n\n}\n\nexport default Header;","import { Typography, Box, Container, Button, TextField } from \"@mui/material\";\n\nfunction PatientInfo(props){\n\n    const savepatientKey = (event) => {\n        event.preventDefault();\n        const data = new FormData(event.currentTarget);\n        let patient = {\n            publicKey: data.get('publicKey').trim(),\n            accountNumber: data.get('accountNumber').trim()\n        }\n        console.log(patient);\n        localStorage.setItem(\"patient\",patient);\n        props.setPatient(patient);    \n    };\n\n    return (\n    <Container component=\"main\" maxWidth=\"xs\">\n        <Box\n        component=\"form\" \n        onSubmit={savepatientKey}\n          sx={{\n            marginTop: 8,\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'center',\n          }}\n        >\n            <Typography variant=\"h6\" color=\"inherit\" component=\"div\">\n              Please input patient's public key \n            </Typography>\n            <TextField\n                id=\"publicKey\"\n                name=\"publicKey\"\n                label=\"Patient Public Key\"\n                sx={{ padding: 1}}\n            />\n            <TextField\n                id=\"accountNumber\"\n                name=\"accountNumber\"\n                label=\"Patient Account Number\"\n                sx={{ padding: 1}}\n            />\n            <Button variant=\"contained\" type=\"submit\">Start Process</Button>\n        </Box>\n    </Container>\n    );\n}\n\nexport default PatientInfo;","import { Button } from \"@mui/material\";\nimport Grid from '@mui/material/Grid';\nimport { useState } from \"react\";\nimport axios from \"axios\";\nimport { FilePond,registerPlugin } from 'react-filepond';\nimport 'filepond/dist/filepond.min.css';\nimport FilePondPluginFileEncode from 'filepond-plugin-file-encode';\n\nconst EthCrypto = require('eth-crypto');\nconst CryptoJS = require(\"crypto-js\");\nregisterPlugin(FilePondPluginFileEncode);\n\n\nfunction UploadComponent(props){\n\nconst startUpload = async () => {\n    const formData = new FormData();\n    let count =0;\n    let random_password = generatePassword();\n    for(let medicalFile in medicalFiles['files'])\n    {\n        count++;\n        let val = medicalFiles['files'][medicalFile];\n        formData.append(\n            \"medical_\"+val.name,\n            val.file,\n            val.name\n        );\n    }\n\n    for(let personalFile in personalFiles['files'])\n    {\n        count++;\n        let val = personalFiles['files'][personalFile];\n        let encrypted = CryptoJS.AES.encrypt(val.getFileEncodeBase64String(),random_password).toString()\n        let enc_blob = new Blob([encrypted],{type: val.type})\n        val = val.file;\n        formData.append(\n            \"personal_\"+val.name,\n            enc_blob,\n            val.name\n        );\n    }\n\n    if(count==0){\n        alert(\"No files selected\");\n        return ;\n    }\n\n    formData.append(\"patient_pub_k\",props.patient.publicKey);\n    formData.append(\"doctor_account\",props.patient.accountNumber);\n    let credentials = JSON.parse(localStorage.getItem(\"credentials\"));\n    formData.append(\"doctor_pub_k\",credentials.publicKey);\n    formData.append(\"patient_account\",credentials.accountNumber);\n    formData.append(\"doctor_pri_k\",credentials.privateKey);\n    let url = \"http://backend.local/submit\";\n\n    let signed_encryption_key = await EthCrypto.encryptWithPublicKey(props.patient.publicKey,random_password);\n    const encryptedString = EthCrypto.cipher.stringify(signed_encryption_key);\n    formData.append(\"signed_encryption_key\",encryptedString);\n    axios.post(url,formData)\n    .then((response)=>{\n        if(response.status === 200){\n            alert(\"Transaction Concluded: Transaction id \"+response.data);\n            props.setPatient(undefined);\n            setPersonalFiles([]);\n            setMedicalFiles([]);        \n        }\n        else\n        {\n            alert(\"Failed to upload\");\n        }\n    });\n}\n\nfunction generatePassword() {\n    var length = 16,\n        charset = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\",\n        retVal = \"\";\n    for (var i = 0, n = charset.length; i < length; ++i) {\n        retVal += charset.charAt(Math.floor(Math.random() * n));\n    }\n    return retVal;\n}\n\nconst restartProcess = () =>{\n    props.setPatient(undefined);\n    setPersonalFiles([]);\n    setMedicalFiles([]);\n}\nconst [personalFiles,setPersonalFiles] = useState({});\nconst [medicalFiles,setMedicalFiles] = useState({});\n\nreturn (\n    <div>\n        <h1>Upload Files</h1>\n        <Button variant=\"contained\" onClick={restartProcess}>Restart Process</Button>\n        <Grid container xs={12}>\n            <Grid item xs={6}>\n                <h1>Personal Files</h1>\n                <div style={{margin:50}}>\n                    <FilePond allowMultiple={true} onupdatefiles={(fileItems) => {\n                        setPersonalFiles({\n                            files: fileItems.map((fileItem) => fileItem),\n                        })\n                    }}\n></FilePond>\n                </div>\n            </Grid>\n            <Grid item xs={6}>\n                <h1>Healthcare Files</h1>\n                    <div style={{margin:50}}>\n                        <FilePond allowMultiple={true} allowFileEncode={true} onupdatefiles={(fileItems) => {\n                        setMedicalFiles({\n                            files: fileItems.map((fileItem) => fileItem),\n                        })\n                    }} ></FilePond>\n                    </div>\n            </Grid>\n        </Grid>\n        <Button variant=\"contained\" sx={{marginTop:2}} onClick={startUpload}>Upload</Button>\n    </div>\n);\n}\n\nexport default UploadComponent","import { useState } from \"react\";\nimport Header from \"../Component/Header\"\nimport PatientInfo from \"../Component/PatientInfo\";\nimport UploadComponent from \"../Component/UploadComponent\";\n\nfunction Homepage(props){\n\n    const [patient,setPatient] = useState(undefined); \n    const setCredentials = props.setCredentials;\n\n    return (\n        <div>\n            <Header setCredentials = {setCredentials}></Header>\n            {\n            patient===undefined?\n            <PatientInfo setPatient= {setPatient}></PatientInfo>\n            :\n            <UploadComponent setPatient= {setPatient} patient = {patient}></UploadComponent>\n            }\n        </div>\n    )\n\n}\n\nexport default Homepage;","import { useState } from 'react';\nimport './App.css';\nimport SignIn from './Pages/Login';\nimport Homepage from './Pages/Homepage';\n\nfunction App() {\n  const [credentials, setCredentials] = useState(localStorage.getItem(\"credentials\"))\n\n  if(!credentials){\n    return (\n      <div className=\"App\">\n        <SignIn credentials={credentials} setCredentials= {setCredentials} ></SignIn>\n      </div>\n    );  \n  }\n\n  return (\n    <div className='App'>\n      <Homepage setCredentials = {setCredentials}></Homepage>\n    </div>\n  )\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}